from sage.rings.polynomial.polynomial_ring_constructor import PolynomialRing
from sage.rings.finite_rings.finite_field_constructor import FiniteField

# Define the base field and polynomial ring
F37 = FiniteField(37)
P.<x> = PolynomialRing(F37)

# Define the primitive polynomial that was found in previous run to randomly search
#primitive_poly = P('34*x^2 + 36*x + 20') # one that I found for degree 2
primitive_poly = P('31*x^4 + 10*x^3 + 20*x^2 + 10*x + 28') # the one for degree 4 
#primitive_poly = P('33*x^4 + 33*x^3 + 25*x^2 + 21*x + 2') # the one for degree 4 

# Construct the extension field using the primitive polynomial
F37_2 = F37.extension(primitive_poly, 'alpha')
alpha = F37_2.gen()

# Check the powers of alpha up to the degree of the field
degree = 37**4  # Since we are dealing with a quadratic polynomial
elements = [alpha^i for i in range(degree-1)]  # used b/c any x^k = 1, so x^degree should be 1, and it is. removed it after verifying this to be the case

# Print the elements to verify they are distinct
print("Elements generated by alpha^i for i from 0 to degree-1:")
for i, elem in enumerate(elements):
    print(f"alpha^{i} = {elem}")

# store the lengths of the sets to print out
set_el = len(set(elements))
el = len(elements)
# Check if all elements are distinct
print(f"set contains {set_el} and number of elements is {el}.")
if set_el == el:
    print("All elements are distinct.")
else:
    print("There are repeated elements, indicating a problem.")
