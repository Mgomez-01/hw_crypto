LIB "/home/speedy/repos/coursework/hw_crypto/lib/ecclib.lib";

// Declare the ring over GF(8), with 2 variables, x and y
ring r = (2, A), (y, x), lp;
// This is the primitive polynomial given to us as a specification
// Here X = \alpha
minpoly = A^3 + A^2 + 1;

// This is the non-singular elliptic curve also given to us as the spec Weirstrauss form E(A^2, 1)
poly E = y^2 + x*y + x^3 + A^2*x^2 + 1;

// number = element in the field
int D, R;
number x1, y1;
list C1, C2;
list e1, e2;
list P_text;
R = 3;
D = 2;
string P = "A";

// normal generator point below
x1 = A^3;
y1 = A^5;
e1 = x1, y1;
list points = genPoints(e1);
e2 = doubleP(e1);
int e2_ind = getIndex(points,e2);
list point_at_e2_index = getPoint(points, e2_ind);
C1 = PaddQ(doubleP(e1),e1);
P_text = e1; // point1 e1 = A
C2 = PaddQ(PaddQ(doubleP(e2),e2),P_text);
// rest of the algo for the decrypting
 
"(C1,C2) -> Bob";
"P = C2 - d*C1";
"P = C2 + (d*C1)^-1";
list d_c1 = PaddQ(doubleP(C1),C1);
int inv_index = getInverseIndex(points, d_c1);
int C2_index = getIndex(points, C2);
printf("= (%s, %s) + (%s, %s)^-1 = P_%s + P_%s = P_%s = P_%s", C2[1], C2[2], d_c1[1], d_c1[2], C2_index, (14 - inv_index)-1, (C2_index + (14 - inv_index)-1 ), (C2_index + (14 - inv_index)-1 )%14);
int plain_text_index = (C2_index + (14 - inv_index)-1 )%14;
"now that we have the index, we can convert back to plain text with NumToChar function we made:";
printf("point P_%s corresponds to %s", plain_text_index, NumToChar(plain_text_index - 1));
quit;