/*
This Singular file demonstrates generation of points, and point
doubling operations on ECC over GF(2^3) = GF(8).
*/



/*********
This is a Procedure to do point doubling
(x3, y3) = 2P(x1, y1). Proc takes a "list" P, where P[1] = x1, P[2] =
y1, and returns a list R = [x3, y3].
**********/
proc doubleP(list P){
list R;
number m, x_3, y_3;

//"List P is:";
//P;

m = P[1] + P[2]/P[1];
x_3 = m^2 + m + A^2;
y_3 = P[1]^2 + (m+1)*x_3;
//printf("m:%s", m);
//printf("x_3:%s", x_3);
//printf("y_3:%s", y_3);
R = x_3, y_3;

//"List R:";
//R;
return(R);

}

// this represents P + Q = R
proc PaddQ(list P, list Q){
list R;
number m, x_3, y_3;

//"List P is:";
//P;

m = (P[2] + Q[2])/(P[1] + Q[1]);

x_3 = m^2 + m + P[1] + Q[1] + A^2;

y_3 = (m)*(x_3 + P[1]) + x_3 + P[2];

//printf("m:%s", m);
//printf("x_3:%s", x_3);
//printf("y_3:%s", y_3);
R = x_3, y_3;

//"List R:";
//R;
return(R);

}



// Declare the ring over GF(8), with 2 variables, x and y

ring r = (2, A), (y, x), lp;
// This is the primitive polynomial given to us as a specification
// Here X = \alpha
minpoly = A^3 + A^2 + 1;

// This is the non-singular elliptic curve also given to us as the spec Weirstrauss form E(A^2, 1)
poly E = y^2 + x*y + x^3 + A^2*x^2 + 1;

// Now we will generate the points
int i;
list factored_res;
// We use poly f to generate the points
poly f;
"================================";
printf("when x = %s", 0);
// Substitute x = 0 in E
f = subst(E, x, 0);
printf("poly f is:");
f;
printf("poly f factorizes as follows:");
factorize(f);
"================================";

// 0 = special element, now we generate the remaining 7 elements
for(i=0; i<8; i = i+1){
printf("when x = A^%s, : x = %s", i, A^i);
f = subst(E, x, A^i);
//printf("poly f after substitution of x = %s:", A^i);
//f;
//printf("poly f factorizes as:");

factored_res = factorize(f);
//factored_res;
printf("P1(x,y) = (%s,%s)", A^i, factored_res[1][2]-y);

if (size(factored_res[1]) > 2 )
{
    printf("P2(x,y) = (%s,%s)", A^i, factored_res[1][3]);
}"================================";
}

// number = element in the field
number x1, y1;
list P;

x1 = A^3;
y1 = A^6;
P = x1, y1;

list R;
printf("P = (%s, %s)", P[1], P[2]);
"Calling doubleP on P";
R = doubleP(P);
"received 2P:";
printf("2P = (%s, %s)", R[1], R[2]);
P = PaddQ(P, R);

int j;
for(j = 1; j<16; j = j+1){

P = PaddQ(P, R);

printf("P + %sP = %sP = (%s, %s)",(j + 1), (j + 2), P[1], P[2]);
}
quit;